import './toastr.scss';
declare type Required<T> = {
    [P in keyof T]-?: T[P];
};
export declare type ToastType = {
    info?: string;
    error?: string;
    warning?: string;
    success?: string;
};
export declare type RequiredToastType = Required<ToastType>;
export declare type ToastrOptions<T = ToastType> = {
    tapToDismiss?: boolean;
    toastClass?: string;
    containerId?: string;
    debug?: boolean;
    showMethod?: 'fadeIn' | 'slideDown' | 'show';
    showDuration?: number;
    showEasing?: 'swing' | 'linear';
    onShown?: Function;
    hideMethod?: 'fadeOut';
    hideDuration?: number;
    hideEasing?: 'swing';
    onHidden?: Function;
    closeMethod?: boolean;
    closeDuration?: number | false;
    closeEasing?: boolean;
    closeOnHover?: boolean;
    extendedTimeOut?: number;
    iconClasses?: T;
    iconClass?: string;
    positionClass?: string;
    timeOut?: number;
    titleClass?: string;
    messageClass?: string;
    escapeHtml?: boolean;
    target?: string;
    closeHtml?: string;
    closeClass?: string;
    newestOnTop?: boolean;
    preventDuplicates?: boolean;
    progressBar?: boolean;
    progressClass?: string;
    onclick?: Function;
    onCloseClick?: Function;
    closeButton?: boolean;
    rtl?: boolean;
};
export declare type NotifyMap = {
    type: string;
    optionsOverride?: ToastrOptions;
    iconClass: string;
    title?: string;
    message?: string;
};
declare class Toastr {
    private listener;
    private toastId;
    private previousToast;
    private toastType;
    private version;
    options: Required<ToastrOptions<RequiredToastType>>;
    $container: HTMLElement;
    constructor(options?: ToastrOptions);
    createContainer(): HTMLElement;
    getContainer(options?: any, create?: any): HTMLElement;
    error(message?: string, title?: string, optionsOverride?: ToastrOptions): HTMLElement | null;
    warning(message?: string, title?: string, optionsOverride?: ToastrOptions): HTMLElement | null;
    success(message?: string, title?: string, optionsOverride?: ToastrOptions): HTMLElement | null;
    info(message?: string, title?: string, optionsOverride?: ToastrOptions): HTMLElement | null;
    subscribe(callback: Function): void;
    publish(args: any): void;
    clear($toastElement?: any, clearOptions?: any): void;
    remove($toastElement: any): void;
    removeToast($toastElement: any): void;
    private clearContainer;
    private clearToast;
    private notify;
}
export default Toastr;
