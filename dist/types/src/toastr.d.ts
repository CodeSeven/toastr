declare type ToastrOptions = {
    tapToDismiss: boolean;
    toastClass: string;
    containerId: string;
    debug: boolean;
    showMethod: 'fadeIn' | 'slideDown' | 'show';
    showDuration: number;
    showEasing: 'swing' | 'linear';
    onShown?: Function;
    hideMethod: 'fadeOut';
    hideDuration: number;
    hideEasing: 'swing';
    onHidden?: Function;
    closeMethod: boolean;
    closeDuration: boolean;
    closeEasing: boolean;
    closeOnHover: boolean;
    onclick?: Function;
    onCloseClick?: Function;
    closeButton: boolean;
    extendedTimeOut: number;
    iconClasses: {
        error: string;
        info: string;
        success: string;
        warning: string;
    };
    iconClass: string;
    positionClass: string;
    timeOut: number;
    titleClass: string;
    messageClass: string;
    escapeHtml: boolean;
    target: string;
    closeHtml: string;
    closeClass: string;
    newestOnTop: boolean;
    preventDuplicates: boolean;
    progressBar: boolean;
    progressClass: string;
    rtl: boolean;
};
declare const toastr: (options?: any) => {
    version: string;
    getContainer: (options?: any, create?: any) => HTMLElement | null;
    subscribe: (callback: Function) => void;
    success: (message: string, title: string, optionsOverride?: ToastrOptions | undefined) => void | HTMLElement;
    warning: (message: string, title: string, optionsOverride?: ToastrOptions | undefined) => void | HTMLElement;
    options: any;
    remove: ($toastElement: any) => void;
    clear: ($toastElement: any, clearOptions: any) => void;
    error: (message: string, title: string, optionsOverride?: ToastrOptions | undefined) => void | HTMLElement;
    info: (message: string, title: string, optionsOverride?: ToastrOptions | undefined) => void | HTMLElement;
};
export default toastr;
